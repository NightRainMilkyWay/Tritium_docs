"use strict";
/**
 * @fileoverview
 *
 * This rule will unify similar punctuations into the same one.
 * Usually, it's just about Chinese quotes.
 *
 * Options:
 * - unifiedPunctuation: "simplified" (default) | "traditional" | undefined
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfig = void 0;
const parser_1 = require("../parser");
const messages_1 = require("./messages");
const util_1 = require("./util");
var QuoteType;
(function (QuoteType) {
    QuoteType[QuoteType["LEFT"] = 0] = "LEFT";
    QuoteType[QuoteType["LEFT_EMBEDDED"] = 1] = "LEFT_EMBEDDED";
    QuoteType[QuoteType["RIGHT_EMBEDDED"] = 2] = "RIGHT_EMBEDDED";
    QuoteType[QuoteType["RIGHT"] = 3] = "RIGHT";
})(QuoteType || (QuoteType = {}));
const replaceMap = {
    simplified: {
        [QuoteType.LEFT]: `“`,
        [QuoteType.LEFT_EMBEDDED]: `‘`,
        [QuoteType.RIGHT_EMBEDDED]: `’`,
        [QuoteType.RIGHT]: `”`
    },
    traditional: {
        [QuoteType.LEFT]: `「`,
        [QuoteType.LEFT_EMBEDDED]: `『`,
        [QuoteType.RIGHT_EMBEDDED]: `』`,
        [QuoteType.RIGHT]: `」`
    }
};
const valueToKey = (obj) => {
    const result = {};
    for (const key in obj) {
        const value = obj[key];
        result[value] = key;
    }
    return result;
};
const checkChar = (content, objectMap, unifiedMap) => {
    const key = objectMap[content];
    if (key) {
        return unifiedMap[key];
    }
    return content;
};
const generateHandler = (options) => {
    const unifiedOption = options === null || options === void 0 ? void 0 : options.unifiedPunctuation;
    if (!unifiedOption) {
        return () => {
            // do nothing
        };
    }
    const message = unifiedOption === 'simplified'
        ? messages_1.PUNCTUATION_UNIFICATION_SIMPLIFIED
        : messages_1.PUNCTUATION_UNIFICATION_TRADITIONAL;
    const unifiedMap = replaceMap[unifiedOption];
    const objectMap = valueToKey(unifiedOption === 'simplified'
        ? replaceMap.traditional
        : replaceMap.simplified);
    const handlerPunctuationUnified = (token) => {
        if (token.type !== parser_1.GroupTokenType.GROUP) {
            return;
        }
        const modifiedStartContent = checkChar(token.modifiedStartContent, objectMap, unifiedMap);
        const modifiedEndContent = checkChar(token.modifiedEndContent, objectMap, unifiedMap);
        (0, util_1.checkStartContent)(token, modifiedStartContent, message);
        (0, util_1.checkEndContent)(token, modifiedEndContent, message);
    };
    return handlerPunctuationUnified;
};
exports.defaultConfig = {
    unifiedPunctuation: 'simplified'
};
exports.default = generateHandler;
