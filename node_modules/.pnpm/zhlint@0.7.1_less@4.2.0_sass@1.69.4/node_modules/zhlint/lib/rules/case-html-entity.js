"use strict";
/**
 * @fileoverview
 *
 * This rule is used to revert changes of HTML entities.
 *
 * Details:
 * - to match `&<half-width-content>;`
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfig = void 0;
const parser_1 = require("../parser");
const report_1 = require("../report");
const util_1 = require("./util");
const generateHandler = (options) => {
    options;
    return (token, _, group) => {
        // skip non-& tokens
        if (token.content !== '&') {
            return;
        }
        // skip non-half-width-content tokens
        const tokenAfter = (0, util_1.findTokenAfter)(group, token);
        if (!tokenAfter ||
            tokenAfter.type !== parser_1.CharType.LETTERS_HALF ||
            token.spaceAfter) {
            return;
        }
        // skip non-semicolon tokens
        const thirdToken = (0, util_1.findTokenAfter)(group, tokenAfter);
        if (!thirdToken || thirdToken.content !== ';' || tokenAfter.spaceAfter) {
            return;
        }
        // revert &
        token.modifiedContent = token.content;
        token.modifiedType = token.type;
        token.modifiedSpaceAfter = token.spaceAfter;
        (0, util_1.removeValidationOnTarget)(token, report_1.ValidationTarget.CONTENT);
        (0, util_1.removeValidationOnTarget)(token, report_1.ValidationTarget.SPACE_AFTER);
        // revert half-width content
        tokenAfter.modifiedContent = tokenAfter.content;
        tokenAfter.modifiedType = tokenAfter.type;
        tokenAfter.modifiedSpaceAfter = tokenAfter.spaceAfter;
        (0, util_1.removeValidationOnTarget)(tokenAfter, report_1.ValidationTarget.CONTENT);
        (0, util_1.removeValidationOnTarget)(tokenAfter, report_1.ValidationTarget.SPACE_AFTER);
        // revert ;
        thirdToken.modifiedContent = thirdToken.content;
        thirdToken.modifiedType = thirdToken.type;
        (0, util_1.removeValidationOnTarget)(thirdToken, report_1.ValidationTarget.CONTENT);
        (0, util_1.removeValidationOnTarget)(thirdToken, report_1.ValidationTarget.SPACE_AFTER);
        const nextToken = (0, util_1.findNonCodeVisibleTokenAfter)(group, thirdToken);
        if (nextToken) {
            const { spaceHost } = (0, util_1.findWrappersBetween)(group, thirdToken, nextToken);
            if (spaceHost) {
                spaceHost.modifiedSpaceAfter = spaceHost.spaceAfter;
                (0, util_1.removeValidationOnTarget)(spaceHost, report_1.ValidationTarget.SPACE_AFTER);
            }
        }
    };
};
exports.defaultConfig = {};
exports.default = generateHandler;
