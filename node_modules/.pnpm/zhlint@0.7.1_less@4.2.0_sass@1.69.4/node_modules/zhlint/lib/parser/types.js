"use strict";
/**
 * @fileOverview
 *
 * This file contains the types for the parser.
 *
 * - Chars
 * - Pairs
 * - Marks
 * - Tokens
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInvisibleType = exports.isVisibleType = exports.isNonCodeVisibleType = exports.isPunctuationType = exports.isLettersType = exports.GroupTokenType = exports.HyperTokenType = exports.isRawMark = exports.MarkSideType = exports.MarkType = exports.isFullWidthPair = exports.SHORTHAND_PAIR_SET = exports.SHORTHAND_CHARS = exports.QUOTE_CHAR_SET = exports.BRACKET_CHAR_SET = exports.CharType = void 0;
var CharType;
(function (CharType) {
    CharType["EMPTY"] = "empty";
    CharType["SPACE"] = "space";
    CharType["LETTERS_HALF"] = "letters-half";
    CharType["LETTERS_FULL"] = "letters-full";
    CharType["PUNCTUATION_HALF"] = "punctuation-half";
    CharType["PUNCTUATION_FULL"] = "punctuation-full";
    CharType["UNKNOWN"] = "unknown";
})(CharType = exports.CharType || (exports.CharType = {}));
exports.BRACKET_CHAR_SET = {
    left: '(（',
    right: ')）'
};
exports.QUOTE_CHAR_SET = {
    left: `“‘《〈『「【{`,
    right: `”’》〉』」】}`,
    neutral: `'"`
};
exports.SHORTHAND_CHARS = `'’`;
exports.SHORTHAND_PAIR_SET = {
    [`'`]: `'`,
    [`’`]: `‘`
};
const FULL_WIDTH_PAIRS = `“”‘’（）「」『』《》〈〉【】`;
const isFullWidthPair = (str) => FULL_WIDTH_PAIRS.indexOf(str) >= 0;
exports.isFullWidthPair = isFullWidthPair;
// Mark
/**
 * Marks are hyper info, including content and wrappers.
 * They are categorized by parsers, not by usage.
 */
var MarkType;
(function (MarkType) {
    /**
     * Brackets
     */
    MarkType["BRACKETS"] = "brackets";
    /**
     * Inline Markdown marks
     */
    MarkType["HYPER"] = "hyper";
    /**
     * - \`xxx\`
     * - &lt;code&gt;xxx&lt;/code&gt;
     * - Hexo/VuePress container
     * - Other html code
     */
    MarkType["RAW"] = "raw";
})(MarkType = exports.MarkType || (exports.MarkType = {}));
var MarkSideType;
(function (MarkSideType) {
    MarkSideType["LEFT"] = "left";
    MarkSideType["RIGHT"] = "right";
})(MarkSideType = exports.MarkSideType || (exports.MarkSideType = {}));
const isRawMark = (mark) => {
    return mark.code !== undefined;
};
exports.isRawMark = isRawMark;
/**
 * TODO: paired html tags should be hyper wrapper
 */
var HyperTokenType;
(function (HyperTokenType) {
    /**
     * Brackets
     */
    HyperTokenType["HYPER_WRAPPER_BRACKET"] = "wrapper-bracket";
    /**
     * Inline Markdown marks
     */
    HyperTokenType["HYPER_WRAPPER"] = "wrapper";
    /**
     * - \`xxx\`
     * - &lt;code&gt;xxx&lt;/code&gt;
     */
    HyperTokenType["HYPER_CONTENT_CODE"] = "hyper-content-code";
    /**
     * - Hexo/VuePress container
     * - Other html code
     */
    HyperTokenType["HYPER_CONTENT"] = "hyper-content";
    /**
     * Unpaired brackets/quotes
     */
    HyperTokenType["UNMATCHED"] = "unmatched";
    /**
     * For indeterminate tokens
     */
    HyperTokenType["INDETERMINATED"] = "indeterminated";
})(HyperTokenType = exports.HyperTokenType || (exports.HyperTokenType = {}));
var GroupTokenType;
(function (GroupTokenType) {
    GroupTokenType["GROUP"] = "group";
})(GroupTokenType = exports.GroupTokenType || (exports.GroupTokenType = {}));
const isLettersType = (type) => {
    return type === CharType.LETTERS_FULL || type === CharType.LETTERS_HALF;
};
exports.isLettersType = isLettersType;
const isPunctuationType = (type) => {
    return (type === CharType.PUNCTUATION_FULL || type === CharType.PUNCTUATION_HALF);
};
exports.isPunctuationType = isPunctuationType;
const isNonCodeVisibleType = (type) => {
    return ((0, exports.isLettersType)(type) ||
        (0, exports.isPunctuationType)(type) ||
        type === HyperTokenType.HYPER_WRAPPER_BRACKET ||
        type === GroupTokenType.GROUP);
};
exports.isNonCodeVisibleType = isNonCodeVisibleType;
const isVisibleType = (type) => {
    return ((0, exports.isNonCodeVisibleType)(type) || type === HyperTokenType.HYPER_CONTENT_CODE);
};
exports.isVisibleType = isVisibleType;
const isInvisibleType = (type) => {
    return type === HyperTokenType.HYPER_WRAPPER;
};
exports.isInvisibleType = isInvisibleType;
